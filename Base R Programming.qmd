---
title: "Base R Programming"
format: html
editor: visual
---

## Task 1: Basic Vector Practice

Create pre- and post-treatment vectors for blood pressure for subjects 1 through 20

```{r}
pre <- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)
post <- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)
```

Assign names to the vector elements

```{r}
names(pre) <- paste("Subject", 1:20, sep = "_")
attributes(pre)
names(post) <- paste("Subject", 1:20, sep = "_")
attributes(post)
```

Calculate pre to post change and store results in a new vector

```{r}
change <- pre - post
change
```

Calculate the mean change in blood pressure across participants

```{r}
mean(change)
```

Use which() function to determine which patients experience a decrease in blood pressure (i.e., positive change)

```{r}
which(change > 0)
```

Subset the vector of differences to only return those that have a positive change

```{r}
change[which(change>0)]
```

Calculate average decrease in blood pressure for those with a positive change

```{r}
mean(change[which(change>0)])
```

## Task 2: Basic Data Frame Practice

Create a data frame object with four columns corresponding to data above (replacing row names with integers to avoid redundancy)

```{r}
bp_df<-data.frame(patient = names(pre), pre_bp = pre, 
                  post_bp = post, diff_bp = change, row.names=seq(1:20))
bp_df
```

Return only rows where diff_bp is negative

```{r}
bp_df[bp_df$diff_bp < 0, ]
```

Add a column corresponding to TRUE if post_bp is less than 120

```{r}
bp_df$post_120 <- ifelse(bp_df$post_bp < 120, TRUE, FALSE)
bp_df
```

Print out the data frame nicely in the final document

```{r}
knitr::kable(bp_df)
```

## Task 3: List Practice

Create a new data frame with placebo data that is similar to the data frame from task 2

```{r}
#Starting with 3 core variables (Patient, pre_bp, and post_bp)
bp2_df <- data.frame(patient = paste("Subject", 1:10, sep="_"), 
                     pre_bp = c(138, 135, 147, 117, 152, 134,
                                114,121, 131, 130), 
                     post_bp = c(105, 136, 123, 130, 134, 143, 
                                 135, 139, 120, 124))
#Now generating last 2 variables from these
bp2_df$diff_bp <- bp2_df$pre_bp - bp2_df$post_bp
bp2_df$post_120 <- ifelse(bp2_df$post_bp < 120, TRUE, FALSE)
bp2_df
```

Create and store a list with 2 elements: 1st named treatment, 2nd named placebo

```{r}
bp_list <- list(treatment = bp_df, placebo = bp2_df)
str(bp_list)
```

Access the first element using 3 types of syntax

```{r}
bp_list[1]
bp_list$treatment
bp_list["treatment"]
```

In one line, access the placebo data frame, pre_bp column

```{r}
bp_list[[2]][[2]]
#Alternatively
bp_list$placebo$pre_bp
```

## Task 4: Control Flow Practice

Create a column to store status category

```{r}
bp_list$treatment$status <- character(20)
bp_list$placebo$status <- character(10)
```

Use if/then logic to create the status column's values

Treatment data frame:

```{r}
bp_list$treatment$status <- 
  ifelse(bp_list$treatment$post_bp > 130, "high",
       ifelse(bp_list$treatment$post_bp > 120, "borderline",
              "optimal"))
bp_list$treatment$status
```

Placebo data frame:

```{r}
bp_list$placebo$status <- 
  ifelse(bp_list$placebo$post_bp > 130, "high",
       ifelse(bp_list$placebo$post_bp > 120, "borderline",
              "optimal"))
bp_list$placebo$status
```

## Task 5: Function Writing

Create a function to return a vector of summary statistics from treatment and placebo data frames stored within a list

```{r}
summarize <- function(list, stat="mean") {
  calc <- get(stat)
  stat1 <- calc(list[[1]][[2]])
  stat2 <- calc(list[[1]][[3]])
  stat3 <- calc(list[[1]][[4]])
  stat4 <- calc(list[[2]][[2]])
  stat5 <- calc(list[[2]][[3]])
  stat6 <- calc(list[[2]][[4]])
return(c(stat1, stat2, stat3, stat4, stat5, stat6))
}
```

Create vectors to store desired stats and output variables names

```{r}
stats_vec <- c("mean", "var", "sd", "min", "max")
names_vec <- c(paste0("txment_pre_",stats_vec[1]),
               paste0("txment_post_",stats_vec[1]),
               paste0("txment_change_",stats_vec[1]),
               paste0("plac_pre_",stats_vec[1]),
               paste0("plac_post_",stats_vec[1]),
               paste0("plac_change_",stats_vec[1]))
```

Create initial application of function on default "mean" statistic, assign names to resulting vector elements

```{r}
result_vec <- summarize(bp_list)
names(result_vec) <- names_vec
```

Initialize a list and a data frame to test out two different approaches to storing the results

```{r}
summary_df <- data.frame(stat = character(),
                         txment_pre = numeric(),
                         txment_post = numeric(),
                         txment_change = numeric(),
                         plac_pre = numeric(),
                         plac_post = numeric(),
                         plac_change = numeric())
summary_df[1, ] <- c(stats_vec[1], result_vec)

summary_list <- list()
summary_list[[1]] <- result_vec
```

Create for loop to apply summarize function across different statistics and save all output to summary_list and summary_df

```{r}
for (i in 2:5){
  names_vec <- c(paste0("txment_pre_",stats_vec[i]),
               paste0("txment_post_",stats_vec[i]),
               paste0("txment_change_",stats_vec[i]),
               paste0("plac_pre_",stats_vec[i]),
               paste0("plac_post_",stats_vec[i]),
               paste0("plac_change_",stats_vec[i]))
  result_vec <- summarize(bp_list, stat=stats_vec[i])
  summary_df[i, ] <- c(stats_vec[i], result_vec)
  names(result_vec) <- names_vec
  summary_list[[i]] <- result_vec
}
```

View results from list and data frame

```{r}
summary_df
summary_list
```
